<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>酱油村的记事录</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-12T03:46:32.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>酱油君</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程(1)</title>
    <link href="http://yoursite.com/2020/05/12/dxc-msg/"/>
    <id>http://yoursite.com/2020/05/12/dxc-msg/</id>
    <published>2020-05-12T03:44:51.000Z</published>
    <updated>2020-05-12T03:46:32.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>多线程—-—ThreadLocal</title>
    <link href="http://yoursite.com/2020/05/09/dxc-threadlocal/"/>
    <id>http://yoursite.com/2020/05/09/dxc-threadlocal/</id>
    <published>2020-05-09T03:15:26.000Z</published>
    <updated>2020-05-12T03:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储。可能很多朋友都知道ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p><p>用ThreadLocal声明的变量可以在线程内部提供变量副本，线程修改ThreadLocal声明的变量互不影响，这就不存在并发的情况了。<a id="more"></a></p><h1 id="1-ThreadLocal的基本使用"><a href="#1-ThreadLocal的基本使用" class="headerlink" title="1.ThreadLocal的基本使用"></a>1.ThreadLocal的基本使用</h1><p><img src="dxc-threadlocal.assets/image-20200509163209050.png" alt="image-20200509163209050"></p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public  class  ThreadLocalDemo  &#123;     </span><br><span class="line">  &#x2F;&#x2F; 初始化ThreadLocal的值————第一种方法：实现抽象方法  </span><br><span class="line">  &#x2F;&#x2F;   private static ThreadLocal threadLocal &#x3D; ThreadLocal.withInitial(new Supplier&lt;String&gt;() &#123;</span><br><span class="line">  &#x2F;&#x2F;        @Override  </span><br><span class="line">  &#x2F;&#x2F;        public String get() &#123;  </span><br><span class="line">  &#x2F;&#x2F;            return &quot;Initial value&quot;;  </span><br><span class="line">  &#x2F;&#x2F;        &#125;  </span><br><span class="line">  &#x2F;&#x2F;    &#125;);  </span><br><span class="line">    </span><br><span class="line">  &#x2F;&#x2F; 初始化ThreadLocal的值————第二种方法：使用Lambda表达式  </span><br><span class="line">  private  static  ThreadLocal  threadLocal  &#x3D; ThreadLocal.withInitial(() - &gt; &#123;</span><br><span class="line">    return  &quot;Initial value&quot;;</span><br><span class="line">  &#125;);       &#x2F;&#x2F; 初始化ThreadLocal的值————第三种方式重写initialValue()方法  </span><br><span class="line">  &#x2F;&#x2F;    private static ThreadLocal threadLocal &#x3D; new ThreadLocal()&#123;  </span><br><span class="line">  &#x2F;&#x2F;        @Override  </span><br><span class="line">  &#x2F;&#x2F;        protected Object initialValue() &#123;  </span><br><span class="line">  &#x2F;&#x2F;            return &quot;Initial value&quot;;  </span><br><span class="line">  &#x2F;&#x2F;        &#125;  </span><br><span class="line">  &#x2F;&#x2F;    &#125;;  </span><br><span class="line">        </span><br><span class="line">  public  static  void  main(String[]  args)  &#123;          </span><br><span class="line">    System.out.println(&quot;ThreadLocal的初始值：&quot;  +  threadLocal.get());          </span><br><span class="line">    threadLocal.set(&quot;Main方法&quot;);          </span><br><span class="line">    new  Thread(()  - &gt;  &#123;              </span><br><span class="line">      System.out.println(&quot;子线程获取ThreadLocal的值：&quot;  +  threadLocal.get());              </span><br><span class="line">      threadLocal.set(&quot;Thread线程&quot;);       </span><br><span class="line">      System.out.println(&quot;子线程执行set方法后，子线程获取ThreadLocal的值：&quot;  +  threadLocal.get());              </span><br><span class="line">      threadLocal.remove();    </span><br><span class="line">      System.out.println(&quot;子线程执行remove方法后，子线程获取ThreadLocal的值：&quot;  +  threadLocal.get());          </span><br><span class="line">    &#125;).start();     </span><br><span class="line">    System.out.println(&quot;主线程执行set方法后，主线程获取ThreadLocal的值：&quot;  +  threadLocal.get());          </span><br><span class="line">    threadLocal.remove();    </span><br><span class="line">    System.out.println(&quot;主线程执行remove方法后，主线程获取ThreadLocal的值：&quot;  +  threadLocal.get());      </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.ThreadLocal的初始值：Initial value  </span><br><span class="line">2.主线程执行set方法后，主线程获取ThreadLocal的值：Main方法  </span><br><span class="line">3.主线程执行remove方法后，主线程获取ThreadLocal的值：Initial value  </span><br><span class="line">4.子线程获取ThreadLocal的值：Initial value  </span><br><span class="line">5.子线程执行set方法后，子线程获取ThreadLocal的值：Thread线程  </span><br><span class="line">6.子线程执行remove方法后，子线程获取ThreadLocal的值：Initial value</span><br></pre></td></tr></table></figure><h1 id="2-ThreadLocal源码剖析"><a href="#2-ThreadLocal源码剖析" class="headerlink" title="2.ThreadLocal源码剖析"></a>2.ThreadLocal源码剖析</h1><p>先看下ThreadLocal类的类图：</p><p><img src="dxc-threadlocal.assets/image-20200509171236546.png" alt="image-20200509171236546"></p><p>可以看出ThreadLocal有两个静态内部类，分别是SuppliedThreadLocal和ThreadLocalMap。实际上，ThreadLocal 类的核心就是 ThreadLocalMap 这个内部类。当创建线程的时候，线程对象都会有 ThreadLocalMap 类型的成员变量。</p><p>*ThreadLocalMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">2.static class ThreadLocalMap &#123;  </span><br><span class="line">3.  </span><br><span class="line">4.    static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;  </span><br><span class="line">5.        Object value;  </span><br><span class="line">6.        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;  </span><br><span class="line">7.            super(k);  </span><br><span class="line">8.            value &#x3D; v;  </span><br><span class="line">9.        &#125;  </span><br><span class="line">10.    &#125;  </span><br><span class="line">11.  </span><br><span class="line">12.    &#x2F;&#x2F; Entry数组的初始容量  </span><br><span class="line">13.    private static final int INITIAL_CAPACITY &#x3D; 16;  </span><br><span class="line">14.  </span><br><span class="line">15.    &#x2F;&#x2F; ThreadLocalMap对象实际上由Entry数组记录ThreadLocal变量  </span><br><span class="line">16.    private Entry[] table;  </span><br><span class="line">17.  </span><br><span class="line">18.    &#x2F;&#x2F; Entry数组元素的个数  </span><br><span class="line">19.    private int size &#x3D; 0;  </span><br><span class="line">20.  </span><br><span class="line">21.    &#x2F;&#x2F; Entry扩容的阀值  </span><br><span class="line">22.    private int threshold;  </span><br><span class="line">23.  </span><br><span class="line">24.    &#x2F;&#x2F; 设置Entry数组的阀值，长度为 len 的 2&#x2F;3 倍  </span><br><span class="line">25.    private void setThreshold(int len) &#123;  </span><br><span class="line">26.        threshold &#x3D; len * 2 &#x2F; 3;  </span><br><span class="line">27.    &#125;  </span><br><span class="line">28.  </span><br><span class="line">29.    &#x2F;&#x2F; Entry数组的下一个索引  </span><br><span class="line">30.    private static int nextIndex(int i, int len) &#123;  </span><br><span class="line">31.        return ((i + 1 &lt; len) ? i + 1 : 0);  </span><br><span class="line">32.    &#125;  </span><br><span class="line">33.  </span><br><span class="line">34.    &#x2F;&#x2F; Entry数组的上一个索引  </span><br><span class="line">35.    private static int prevIndex(int i, int len) &#123;  </span><br><span class="line">36.        return ((i - 1 &gt;&#x3D; 0) ? i - 1 : len - 1);  </span><br><span class="line">37.    &#125;  </span><br><span class="line">38.  </span><br><span class="line">39.    &#x2F;&#x2F; 初始化ThreadLocalMap对象  </span><br><span class="line">40.    ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;  </span><br><span class="line">41.        table &#x3D; new Entry[INITIAL_CAPACITY];  </span><br><span class="line">42.        int i &#x3D; firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);  </span><br><span class="line">43.        table[i] &#x3D; new Entry(firstKey, firstValue);&#x2F;&#x2F; 初始化Entry  </span><br><span class="line">44.        size &#x3D; 1;  </span><br><span class="line">45.        setThreshold(INITIAL_CAPACITY);  </span><br><span class="line">46.    &#125;  </span><br><span class="line">47.  </span><br><span class="line">48.    &#x2F;&#x2F; ThreadLocal.set()主要核心方法  </span><br><span class="line">49.    private void set(ThreadLocal&lt;?&gt; key, Object value) &#123;  </span><br><span class="line">50.        Entry[] tab &#x3D; table;  </span><br><span class="line">51.        int len &#x3D; tab.length;  </span><br><span class="line">52.        int i &#x3D; key.threadLocalHashCode &amp; (len - 1);&#x2F;&#x2F; ThreadLocal对象经过哈希算法确定元素索引 i  </span><br><span class="line">53.  </span><br><span class="line">54.        &#x2F;&#x2F; 如果数组索引对应的Entry对象不是null，则进入for循环  </span><br><span class="line">55.        for (Entry e &#x3D; tab[i];  </span><br><span class="line">56.             e !&#x3D; null;  </span><br><span class="line">57.             e &#x3D; tab[i &#x3D; nextIndex(i, len)]) &#123;  </span><br><span class="line">58.            ThreadLocal&lt;?&gt; k &#x3D; e.get();  </span><br><span class="line">59.  </span><br><span class="line">60.            if (k &#x3D;&#x3D; key) &#123;  </span><br><span class="line">61.                e.value &#x3D; value;  </span><br><span class="line">62.                return;  </span><br><span class="line">63.            &#125;  </span><br><span class="line">64.  </span><br><span class="line">65.            &#x2F;&#x2F; 如果key为null则说明该entry已经失效，执行replaceStaleEntry替换掉  </span><br><span class="line">66.            if (k &#x3D;&#x3D; null) &#123;  </span><br><span class="line">67.                replaceStaleEntry(key, value, i);  </span><br><span class="line">68.                return;  </span><br><span class="line">69.            &#125;  </span><br><span class="line">70.        &#125;  </span><br><span class="line">71.        &#x2F;&#x2F; 向数组新增Entry对象元素  </span><br><span class="line">72.        tab[i] &#x3D; new Entry(key, value);  </span><br><span class="line">73.        int sz &#x3D; ++size;  </span><br><span class="line">74.        if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;&#x3D; threshold)&#x2F;&#x2F; 清除一些过期的值并且判断是否需要扩容  </span><br><span class="line">75.            rehash();  </span><br><span class="line">76.    &#125;  </span><br><span class="line">77.  </span><br><span class="line">78.&#x2F;&#x2F; 将新元素放进陈旧的元素  </span><br><span class="line">79.    private void replaceStaleEntry(ThreadLocal&lt;?&gt; key, Object value,  </span><br><span class="line">80.                                   int staleSlot) &#123;  </span><br><span class="line">81.        Entry[] tab &#x3D; table;  </span><br><span class="line">82.        int len &#x3D; tab.length;  </span><br><span class="line">83.        Entry e;  </span><br><span class="line">84.  </span><br><span class="line">85.        int slotToExpunge &#x3D; staleSlot;  </span><br><span class="line">86.        &#x2F;&#x2F; 向前查找被弃用的索引  </span><br><span class="line">87.        for (int i &#x3D; prevIndex(staleSlot, len);  </span><br><span class="line">88.             (e &#x3D; tab[i]) !&#x3D; null;  </span><br><span class="line">89.             i &#x3D; prevIndex(i, len))  </span><br><span class="line">90.            if (e.get() &#x3D;&#x3D; null)  </span><br><span class="line">91.                slotToExpunge &#x3D; i;  </span><br><span class="line">92.  </span><br><span class="line">93.        &#x2F;&#x2F; 向后查找key或者value为null的元素  </span><br><span class="line">94.        for (int i &#x3D; nextIndex(staleSlot, len);  </span><br><span class="line">95.             (e &#x3D; tab[i]) !&#x3D; null;  </span><br><span class="line">96.             i &#x3D; nextIndex(i, len)) &#123;  </span><br><span class="line">97.            ThreadLocal&lt;?&gt; k &#x3D; e.get();  </span><br><span class="line">98.  </span><br><span class="line">99.            if (k &#x3D;&#x3D; key) &#123;  </span><br><span class="line">100.                e.value &#x3D; value;  </span><br><span class="line">101.  </span><br><span class="line">102.                tab[i] &#x3D; tab[staleSlot];  </span><br><span class="line">103.                tab[staleSlot] &#x3D; e;  </span><br><span class="line">104.  </span><br><span class="line">105.                &#x2F;&#x2F; 如果存在则清除被弃用的Entry对象  </span><br><span class="line">106.                if (slotToExpunge &#x3D;&#x3D; staleSlot)  </span><br><span class="line">107.                    slotToExpunge &#x3D; i;  </span><br><span class="line">108.                cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);  </span><br><span class="line">109.                return;  </span><br><span class="line">110.            &#125;  </span><br><span class="line">111.  </span><br><span class="line">112.            if (k &#x3D;&#x3D; null &amp;&amp; slotToExpunge &#x3D;&#x3D; staleSlot)  </span><br><span class="line">113.                slotToExpunge &#x3D; i;  </span><br><span class="line">114.        &#125;  </span><br><span class="line">115.  </span><br><span class="line">116.        tab[staleSlot].value &#x3D; null;  </span><br><span class="line">117.        tab[staleSlot] &#x3D; new Entry(key, value);  </span><br><span class="line">118.  </span><br><span class="line">119.        &#x2F;&#x2F; 如果还有其它被弃用的Entry对象，执行cleanSomeSlots方法清除他们  </span><br><span class="line">120.        if (slotToExpunge !&#x3D; staleSlot)  </span><br><span class="line">121.            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);  </span><br><span class="line">122.    &#125;  </span><br><span class="line">123.  </span><br><span class="line">124.    &#x2F;&#x2F; 清除被弃用的元素  </span><br><span class="line">125.    private boolean cleanSomeSlots(int i, int n) &#123;  </span><br><span class="line">126.        boolean removed &#x3D; false;  </span><br><span class="line">127.        Entry[] tab &#x3D; table;  </span><br><span class="line">128.        int len &#x3D; tab.length;  </span><br><span class="line">129.        do &#123;  </span><br><span class="line">130.            i &#x3D; nextIndex(i, len);  </span><br><span class="line">131.            Entry e &#x3D; tab[i];  </span><br><span class="line">132.            if (e !&#x3D; null &amp;&amp; e.get() &#x3D;&#x3D; null) &#123;  </span><br><span class="line">133.                n &#x3D; len;  </span><br><span class="line">134.                removed &#x3D; true;  </span><br><span class="line">135.                i &#x3D; expungeStaleEntry(i);  </span><br><span class="line">136.            &#125;  </span><br><span class="line">137.        &#125; while ( (n &gt;&gt;&gt;&#x3D; 1) !&#x3D; 0);  </span><br><span class="line">138.        return removed;  </span><br><span class="line">139.    &#125;  </span><br><span class="line">140.  </span><br><span class="line">141.    &#x2F;&#x2F; 清除目标对象，并向后扫描清除被弃用的元素  </span><br><span class="line">142.    private int expungeStaleEntry(int staleSlot) &#123;  </span><br><span class="line">143.        Entry[] tab &#x3D; table;  </span><br><span class="line">144.        int len &#x3D; tab.length;  </span><br><span class="line">145.  </span><br><span class="line">146.        tab[staleSlot].value &#x3D; null;  </span><br><span class="line">147.        tab[staleSlot] &#x3D; null;  </span><br><span class="line">148.        size--;  </span><br><span class="line">149.  </span><br><span class="line">150.        Entry e;  </span><br><span class="line">151.        int i;  </span><br><span class="line">152.        for (i &#x3D; nextIndex(staleSlot, len);  </span><br><span class="line">153.             (e &#x3D; tab[i]) !&#x3D; null;  </span><br><span class="line">154.             i &#x3D; nextIndex(i, len)) &#123;  </span><br><span class="line">155.            ThreadLocal&lt;?&gt; k &#x3D; e.get();  </span><br><span class="line">156.            if (k &#x3D;&#x3D; null) &#123;  </span><br><span class="line">157.                e.value &#x3D; null;  </span><br><span class="line">158.                tab[i] &#x3D; null;  </span><br><span class="line">159.                size--;  </span><br><span class="line">160.            &#125; else &#123;  </span><br><span class="line">161.                int h &#x3D; k.threadLocalHashCode &amp; (len - 1);  </span><br><span class="line">162.                if (h !&#x3D; i) &#123;  </span><br><span class="line">163.                    tab[i] &#x3D; null;  </span><br><span class="line">164.  </span><br><span class="line">165.                    while (tab[h] !&#x3D; null)  </span><br><span class="line">166.                        h &#x3D; nextIndex(h, len);  </span><br><span class="line">167.                    tab[h] &#x3D; e;  </span><br><span class="line">168.                &#125;  </span><br><span class="line">169.            &#125;  </span><br><span class="line">170.        &#125;  </span><br><span class="line">171.        return i;  </span><br><span class="line">172.    &#125;  </span><br><span class="line">173.  </span><br><span class="line">174.    &#x2F;&#x2F; 清除弃用元素并判断是否需要扩容  </span><br><span class="line">175.    private void rehash() &#123;  </span><br><span class="line">176.        expungeStaleEntries();  </span><br><span class="line">177.        if (size &gt;&#x3D; threshold - threshold &#x2F; 4)  </span><br><span class="line">178.            resize();  </span><br><span class="line">179.    &#125;  </span><br><span class="line">180.  </span><br><span class="line">181.    &#x2F;&#x2F; 扩容  </span><br><span class="line">182.    private void resize() &#123;  </span><br><span class="line">183.        Entry[] oldTab &#x3D; table;  </span><br><span class="line">184.        int oldLen &#x3D; oldTab.length;  </span><br><span class="line">185.        int newLen &#x3D; oldLen * 2;  </span><br><span class="line">186.        Entry[] newTab &#x3D; new Entry[newLen];  </span><br><span class="line">187.        int count &#x3D; 0;  </span><br><span class="line">188.  </span><br><span class="line">189.        for (int j &#x3D; 0; j &lt; oldLen; ++j) &#123;  </span><br><span class="line">190.            Entry e &#x3D; oldTab[j];  </span><br><span class="line">191.            if (e !&#x3D; null) &#123;  </span><br><span class="line">192.                ThreadLocal&lt;?&gt; k &#x3D; e.get();  </span><br><span class="line">193.                if (k &#x3D;&#x3D; null) &#123;  </span><br><span class="line">194.                    e.value &#x3D; null; &#x2F;&#x2F; Help the GC  </span><br><span class="line">195.                &#125; else &#123;  </span><br><span class="line">196.                    int h &#x3D; k.threadLocalHashCode &amp; (newLen - 1);  </span><br><span class="line">197.                    while (newTab[h] !&#x3D; null)  </span><br><span class="line">198.                        h &#x3D; nextIndex(h, newLen);  </span><br><span class="line">199.                    newTab[h] &#x3D; e;  </span><br><span class="line">200.                    count++;  </span><br><span class="line">201.                &#125;  </span><br><span class="line">202.            &#125;  </span><br><span class="line">203.        &#125;  </span><br><span class="line">204.  </span><br><span class="line">205.        setThreshold(newLen);  </span><br><span class="line">206.        size &#x3D; count;  </span><br><span class="line">207.        table &#x3D; newTab;  </span><br><span class="line">208.    &#125;  </span><br><span class="line">209.  </span><br><span class="line">210.    &#x2F;&#x2F; 清空被弃用的元素  </span><br><span class="line">211.    private void expungeStaleEntries() &#123;  </span><br><span class="line">212.        Entry[] tab &#x3D; table;  </span><br><span class="line">213.        int len &#x3D; tab.length;  </span><br><span class="line">214.        for (int j &#x3D; 0; j &lt; len; j++) &#123;  </span><br><span class="line">215.            Entry e &#x3D; tab[j];  </span><br><span class="line">216.            if (e !&#x3D; null &amp;&amp; e.get() &#x3D;&#x3D; null)  </span><br><span class="line">217.                expungeStaleEntry(j);  </span><br><span class="line">218.        &#125;  </span><br><span class="line">219.    &#125;  </span><br><span class="line">220.&#125;</span><br></pre></td></tr></table></figure><p>可以看到ThreadLocalMap的Entry继承了WeakReference，并且使用ThreadLocal作为键值。</p><p>至此，可能大部分朋友已经明白了ThreadLocal是如何为每个线程创建变量的副本的：</p><p>首先，在每个线程Thread内部有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。</p><p>实际上，ThreadLocalMap是一个数组，而数组内的元素都是由key和value组成的Entry对象。ThreadLocalMap的key就是经过哈希算法计算出来的ThreadLocal对象。神奇的是，ThreadLocal的哈希算法可以保证只要在ThreadLocalMap数组长度为2的 N 次方的时候，哈希值能平均的分布,避免键冲突。</p><h1 id="3-看一下set方法"><a href="#3-看一下set方法" class="headerlink" title="3.看一下set方法"></a>3.看一下set方法</h1><p><img src="dxc-threadlocal.assets/image-20200509171657703.png" alt="image-20200509171657703"></p><p>1) 获取当前线程对象</p><p>2) 以当前线程对象为参数获取，当前Thread对象中的ThreadLocalMap对象</p><p>3) 判断当前Thread对象中的ThreadLocalMap对象是否为null</p><p><em>*为null：为当前线程对象的ThreadLocalMaps成员变量初始化，并赋值</em></p><p><img src="dxc-threadlocal.assets/image-20200509171752156.png" alt="image-20200509171752156"></p><p>构造方法中会将val生成Entry对象存入Entry数组（索引为ThreadLocal对象内存地址哈希计算所得）</p><p><em>*不为null：调用ThreadLocalMap的set方法进行赋值</em></p><p><img src="dxc-threadlocal.assets/image-20200509171833410.png" alt="image-20200509171833410"></p><p>在ThreadLocalMap的set方法中，将传递来的参数ThreadLocal对象的地址值进行哈希计算出索引值，创建Val的Entry对象，将值插入所计算得出Entry数组的索引位置</p><h1 id="4-看一下get方法"><a href="#4-看一下get方法" class="headerlink" title="4.看一下get方法"></a>4.看一下get方法</h1><p><img src="dxc-threadlocal.assets/image-20200509171930269.png" alt="image-20200509171930269"></p><p>1) 获取当前线程对象</p><p>2) 以当前线程对象为参数获取，当前Thread对象中的ThreadLocalMap对象</p><p>3) 判断当前Thread对象中的ThreadLocalMap对象是否为null</p><p><em>*为null：进入初始化方法：创建ThrealocalMap，赋初始值</em></p><p><img src="dxc-threadlocal.assets/image-20200509172040768.png" alt="image-20200509172040768"></p><p><em>*不为null：调用ThrealocalMap的getEntry方法获取Entry对象，参数ThreadLocal对象</em></p><p><img src="dxc-threadlocal.assets/image-20200509172110335.png" alt="image-20200509172110335"></p><p>根据ThreadLocal对象的内存地址哈希计算得出指定ThreadLocal对象的值在Entry数据的存储索引，获取Entry对象进而获取值</p><h1 id="领悟："><a href="#领悟：" class="headerlink" title="领悟："></a>领悟：</h1><p>我们可以看出一个Thread对象的ThreadLocalMap成员变量是属于该线程对象的，所以ThreadLocalMap对象中的Entry数组也是属于该线程的，Entry数组索引由ThreadLocal对象内存哈希计算得出，元素为值封装的Entry对象，ThreadLocal对象的init***、get、set方法调用是加载ThreadLocal对象到Entry数组的时机，所以ThreadLocal对象用static修饰完全没有问题，因为每个线程对象的ThreadLocalMap对象是不同的，同时也只是取ThreadLocal对象的内存地址计算作为数组的索引</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储。可能很多朋友都知道ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。&lt;/p&gt;
&lt;p&gt;用ThreadLocal声明的变量可以在线程内部提供变量副本，线程修改ThreadLocal声明的变量互不影响，这就不存在并发的情况了。
    
    </summary>
    
    
    
  </entry>
  
</feed>
